name: Run Connector E2E Tests (staging)

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches: [main]
    paths:
      - registry/**

jobs:
  setup-e2e:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.e2e-test-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get all connector version package changes
        id: connector-version-changed-files
        uses: tj-actions/changed-files@v46.0.1
        with:
          json: true
          escape_json: false
          files: |
            registry/**

      - name: Print out all the changed files
        env:
          ADDED_FILES: ${{ steps.connector-version-changed-files.outputs.added_files }}
          MODIFIED_FILES: ${{ steps.connector-version-changed-files.outputs.modified_files }}
          DELETED_FILES: ${{ steps.connector-version-changed-files.outputs.deleted_files }}
        run: |
          echo "{\"added_files\": $ADDED_FILES, \"modified_files\": $MODIFIED_FILES, \"deleted_files\": $DELETED_FILES}" > changed_files.json

      - name: List changed files
        id: list_files
        run: |
          cat changed_files.json

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.x

      - name: Get the list of e2e tests to run
        id: e2e-test-matrix
        env:
          CHANGED_FILES_PATH: "changed_files.json"
        run: |
          mv changed_files.json registry-automation/changed_files.json
          export NDC_HUB_GIT_REPO_FILE_PATH=$(pwd)
          cd registry-automation
          MATRIX_JSON=$(go run main.go e2e changed)
          echo "$MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

      - name: Check if connector is published to staging
        id: check-connector-publish-status
        run: |
          LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
          REQUIRED_LABEL="connector-staging-deploy-success"
          if echo "$LABELS" | jq -e 'contains(["'"$REQUIRED_LABEL"'"])' > /dev/null; then
            echo "Connector published to staging!"
          else
            echo "Error: Connector is not yet published to staging. This Job will automatically run again once the connector is published to staging."
            exit 1
          fi

  build-ddn-workspace:
    needs: setup-e2e
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build DDN Workspace
        run: |
          set -e
          
          # Remove any existing images
          docker compose -f ddn-workspace/compose.yaml down --rmi all || true
          
          # Clean build cache
          docker builder prune -f
          
          echo "🚀 Building DDN Workspace"
          
          if [ ! -f "ddn-workspace/Dockerfile" ]; then
            echo "❌ Dockerfile not found at ddn-workspace/Dockerfile"
            ls -la ddn-workspace/ || echo "ddn-workspace directory not found"
            exit 1
          fi
          
          echo "✅ Found Dockerfile, building compose image..."
          DOCKER_BUILDKIT=1 docker compose -f ddn-workspace/compose.yaml build \
            --progress=plain \
            --parallel \
            --build-arg BUILDKIT_INLINE_CACHE=1
          
          echo "✅ DDN Workspace built successfully"

      - name: Test DDN Workspace
        env:
          DDN_WORKSPACE_ACCESS_TOKEN: ${{ secrets.HASURA_DDN_PAT }}
        run: |
          set -e
          
          echo "🧪 Testing DDN Workspace image"
          docker compose -f ddn-workspace/compose.yaml up -d
          
          # Wait for container to be healthy
          echo "⏳ Waiting for DDN Workspace to be ready..."
          for i in {1..30}; do
            if docker compose -f ddn-workspace/compose.yaml exec -T ddn-native-workspace echo "ready" 2>/dev/null; then
              echo "✅ DDN Workspace is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ DDN Workspace failed to start"
              docker compose -f ddn-workspace/compose.yaml logs
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          docker compose -f ddn-workspace/compose.yaml ps
          
          # Test basic functionality
          docker compose -f ddn-workspace/compose.yaml run --rm --entrypoint="" ddn-native-workspace echo "✅ Image runs successfully"
          
          # Test connector discovery
          echo "📋 Available connectors:"
          docker compose -f ddn-workspace/compose.yaml run --rm --entrypoint="" ddn-native-workspace show_supported_connector_versions.sh || echo "⚠️ Connector discovery failed"
          
          # Cleanup
          docker compose -f ddn-workspace/compose.yaml down

  e2e-tests:
    needs: [setup-e2e, build-ddn-workspace]
    runs-on: ubuntu-latest
    environment: staging
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJSON(needs.setup-e2e.outputs.matrix) }}
    env:
      CLI_TAG: latest-staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare test configuration
        run: |
          set -e
          
          # Create test job file
          JOB_JSON='${{ toJSON(matrix.task) }}'
          echo "Test configuration: $JOB_JSON"
          echo "$JOB_JSON" | jq -c '[.]' > registry-automation/e2e-testing/test-job.json
          
          # Verify file was created
          echo "Created test-job.json with contents:"
          cat registry-automation/e2e-testing/test-job.json

      - name: Prepare environment variables
        run: |
          set -e
          
          # Create env file for docker compose
          cat > ddn-workspace/.env <<EOF
          HASURA_DDN_PAT=${{ secrets.HASURA_DDN_PAT }}
          DDN_WORKSPACE_ACCESS_TOKEN=${{ secrets.DDN_STAGING_PAT }}
          CLI_TAG=${CLI_TAG}
          TEST_JOB_FILE=/workspace/e2e-testing/test-job.json
          NDC_HUB_GIT_REPO_FILE_PATH=/workspace
          EOF
          
          # Add all _CONFIG_OPTIONS_ENV variables
          env | grep -E ".*_CONFIG_OPTIONS_ENV" >> ddn-workspace/.env || true
          
          # Handle BigQuery credentials if present
          if [ -n "${{ secrets.BIGQUERY_KEY_JSON }}" ]; then
            echo "${{ secrets.BIGQUERY_KEY_JSON }}" > registry-automation/e2e-testing/bigquery-key.json
            echo "BIGQUERY_KEY_JSON_FILE=/workspace/e2e-testing/bigquery-key.json" >> ddn-workspace/.env
          fi

      - name: Start DDN Workspace with volume mounts
        run: |
          set -e
          
          echo "🚀 Starting DDN Workspace with test volumes"
          
          # Create a custom compose override file for volumes
          cat > ddn-workspace/compose.override.yaml <<EOF
          services:
            ddn-native-workspace:
              volumes:
                - $(pwd)/registry-automation/e2e-testing:/workspace/e2e-testing
                - $(pwd)/registry:/workspace/registry:ro
                - $(pwd)/registry-automation:/workspace/registry-automation:ro
          EOF
          
          # Start the workspace
          docker compose -f ddn-workspace/compose.yaml -f ddn-workspace/compose.override.yaml up -d
          
          # Wait for container to be healthy
          echo "⏳ Waiting for DDN Workspace to be ready..."
          for i in {1..30}; do
            if docker compose -f ddn-workspace/compose.yaml exec -T ddn-native-workspace echo "ready" 2>/dev/null; then
              echo "✅ DDN Workspace is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ DDN Workspace failed to start"
              docker compose -f ddn-workspace/compose.yaml logs
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

      - name: Login to DDN
        run: |
          set -e
          
          echo "🔑 Logging in to DDN"
          docker compose -f ddn-workspace/compose.yaml exec -T ddn-native-workspace \
            ddn auth login --access-token ${{ secrets.DDN_STAGING_PAT }}

      - name: Run E2E tests
        run: |
          set -e
          
          echo "🧪 Running E2E tests for: ${{ toJSON(matrix.task) }}"
          
          # Pass environment variables from .env file
          docker compose -f ddn-workspace/compose.yaml exec -T \
            --env-file ddn-workspace/.env \
            --user root \
            ddn-native-workspace bash -c '
              set -e
              
              # Activate mise for correct node/bun versions
              eval "$(mise activate bash)" || true
              
              # Install bun if not already available
              if ! command -v bun &> /dev/null; then
                echo "📦 Installing bun..."
                curl -fsSL https://bun.sh/install | bash
                export PATH="$HOME/.bun/bin:$PATH"
              fi
              
              # Verify bun installation
              bun --version
              
              # Navigate to e2e testing directory
              cd /workspace/e2e-testing
              
              # Verify test job file exists
              if [ ! -f "test-job.json" ]; then
                echo "❌ test-job.json not found!"
                ls -la
                exit 1
              fi
              
              echo "📦 Installing dependencies..."
              bun install
              
              echo "🚀 Starting E2E tests..."
              bun run start-ndc
          '

      - name: Collect test results
        if: always()
        run: |
          echo "📊 Collecting test results and logs"
          
          # Show container logs
          docker compose -f ddn-workspace/compose.yaml logs --tail=100 || true
          
          # List test directory contents
          docker compose -f ddn-workspace/compose.yaml exec -T ddn-native-workspace \
            ls -la /workspace/e2e-testing/ || true
          
          # If there are test results, they should already be in the mounted volume
          if [ -d "registry-automation/e2e-testing/results" ]; then
            echo "Test results found:"
            ls -la registry-automation/e2e-testing/results/
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ strategy.job-index }}
          path: |
            registry-automation/e2e-testing/results/
            registry-automation/e2e-testing/*.log
          if-no-files-found: ignore

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up"
          
          # Stop and remove containers
          docker compose -f ddn-workspace/compose.yaml -f ddn-workspace/compose.override.yaml down || true
          
          # Remove sensitive files
          rm -f ddn-workspace/.env
          rm -f ddn-workspace/compose.override.yaml
          rm -f registry-automation/e2e-testing/bigquery-key.json
          rm -f registry-automation/e2e-testing/test-job.json